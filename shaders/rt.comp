#version 460 core

layout(binding = 0, rgba32f) uniform image2D framebuffer;
layout(binding = 0) uniform isampler3D shadowTexture;

struct Camera{
    vec3 pos;
    vec3 dir;
    vec3 yAxis;
    vec3 xAxis;
    float tanFovY;
    float tanFovX;
};

struct Cube {
    mat4 transMat;
    float halfSize;
};

struct Object{
    Cube    c;
    int     material_index[6];
    vec3    containing_voxels[8];
    int   containing_voxels_count;
};

//attenuation.w : 1 = Point light; 2 = Directional light
struct Light{
    vec4 pos_dir;
    vec4 color;
    vec4 attenuation;
};

struct Material{
    vec4 diffuse;
    vec4 specularity;
    vec4 emission;
    float shininess;
};

struct HitInfo {
    vec3    normal;
    float   intersection_dist;
    uint    box_index;
    int     plane_index;
};

struct PlaneInfo {
    uint    ax_index;
    float   e;
    float   f;
    float   tMin;
    float   tMax;
    int     plane_index;
};

struct Ray{
    vec3 origin;
    vec3 dir;
};

layout(std430) buffer PrimitiveBuffer{
    Object objects[];
};

layout(std430) buffer MaterialBuffer{
    Material materials[];
};

layout(std430) buffer LightBuffer{
    Light lights[];
};

// Camera specs
uniform Camera camera;
uniform uint width;
uniform uint height;

// Scene info
uniform uint numObj;
uniform uint numLights;
uniform uint reflectionDepth;

#define FAR_CLIP 100.0
#define EPSILON 0.000001f

// Initialize the primary ray for pixel x, y
Ray initRay(uint x, uint y)
{
    float halfWidth = float(width) / 2.0f;
    float halfHeight = float(height) / 2.0f;

    float a = camera.tanFovX * ((float(x) - halfWidth + 0.5f) / halfWidth);
    float b = camera.tanFovY * ((halfHeight - float(y) - 0.5f) / halfHeight);

    vec3 dir = normalize((a * camera.xAxis + b * camera.yAxis + camera.dir).xyz);

    return Ray(camera.pos.xyz, dir);
}

float fabs(float f) {
    return (f > 0 ? f : -f);
}

Ray getReflectionRay(Ray r, float t, uint objIdx, vec3 normal)
{
    vec3 intersectionPoint = r.origin + r.dir * t;

    // Compute Normal at intersection point
    vec3 N = normalize(normal);

    // Compute reflected direction vector along the normal
    vec3 reflectedDir = normalize(r.dir - 2 * dot(r.dir, N) * N);

    return Ray(intersectionPoint + reflectedDir * 0.01f, reflectedDir);
}

bool intersectPlanes(const vec3 axis, int box_index, inout PlaneInfo p_info, out vec3 normal) {
	// Test intersection between ray and the 2 planes perpendicular to one OBB axis
    float swapped = -1.f;
    Cube c = objects[box_index].c;

    if (fabs(p_info.f) > EPSILON) {
        float t1 = (p_info.e - c.halfSize)/p_info.f; // Intersection with "left" (for xaxis) plane
        float t2 = (p_info.e + c.halfSize)/p_info.f; // Intersection with "right" (for xaxis) plane
        // We want t1 to be nearest intersection, so if it's not, invert t1 and t2
        if (t1 > t2) {
            float tmp = t1;
            t1 = t2;
            t2 = tmp;
            swapped = 1.f; // Used to invert the normal (~ choose opposite cube face)
        }

        p_info.tMax = t2 < p_info.tMax ? t2 : p_info.tMax; // Tmax = nearest "far" intersection
        if (t1 > p_info.tMin) { // Tmin = farthest "near" intersection
            p_info.tMin = t1;
            p_info.plane_index = int(p_info.ax_index * 2) + int(max(swapped, 0));
            normal = normalize(swapped * axis);
        }

        // The trick : if "far" is closer than "near", then there is NO intersection.
        if (p_info.tMax < p_info.tMin)
            return false;
    }
    else if(-p_info.e - c.halfSize + c.transMat[3][p_info.ax_index] > 0.0f ||
                -p_info.e + c.halfSize + c.transMat[3][p_info.ax_index] < 0.0f) {
        // Rare case : the ray is almost parallel to the planes, so they don't have any "intersection"
        return false;
    }
    return true;
}

int intersectBox(Ray r, int box_index, out float intersection_dist, out vec3 normal) {
    // https://www.opengl-tutorial.org/miscellaneous/clicking-on-objects/picking-with-custom-ray-obb-function/
    Cube c = objects[box_index].c;
    // 4th vector in a transformation matrix is translation vector, here the center
    vec3 center = c.transMat[3].xyz;
    PlaneInfo p_info = {0, 0.f, 0.f, 0.f, 100000.0f, 0};

    for (int ax_index = 0; ax_index < 3; ax_index++) {
        vec3 axis = c.transMat[ax_index].xyz; 
        p_info.e = dot(axis, center - r.origin); // Projection of (center - ray_orig) on axis
        p_info.f = dot(axis, r.dir); // Projection of ray on axis
        p_info.ax_index = ax_index;
        if (!intersectPlanes(axis, box_index, p_info, normal))
            return -1;
    }

	intersection_dist = p_info.tMin;
    return p_info.plane_index;
}

vec4 calculateColor(Ray r, float t, uint box_index, vec3 normal, uint plane_material_index)
{
    vec4 color = vec4(0);
    vec3 L, H;
    Cube c = objects[box_index].c;

    vec3 intersectionPoint = r.origin + t * r.dir;
    intersectionPoint += 0.01f * normal; // TODO: Find why offset intersectionPoint along normal like this

    for (int j = 0; j < numLights; ++j) {
        int lightType = int(lights[j].attenuation.w);

        switch (lightType) {
            //Point light
            case 1:{
                L = normalize(lights[j].pos_dir.xyz - intersectionPoint);
            }break;

            //Directional light
            case 2:{
                L = normalize(lights[j].pos_dir.xyz);
            }break;
        }

        Ray shadowRay = Ray(intersectionPoint, L);
        bool inShadow = false;

        for (int i = 0; i < numObj; i++) {
            float intersection_dist;
            vec3 normal_shadow;
            if (intersectBox(shadowRay, i, intersection_dist, normal_shadow) == -1)
                continue;

            switch (lightType) {
                //Point light
                case 1:{
                    if (intersection_dist < FAR_CLIP &&
                        intersection_dist >= -EPSILON &&
                        intersection_dist < length(intersectionPoint - lights[j].pos_dir.xyz))
                    {
                        inShadow = true;
                        i = int(numObj);
                    }
                } break;

                //Directional light
                case 2:{
                    if (intersection_dist < FAR_CLIP && intersection_dist >= -EPSILON) {
                        inShadow = true;
                        i = int(numObj);
                    }
                } break;
            }
        }

        if (!inShadow) {
            H = normalize(L + normalize(camera.pos.xyz - intersectionPoint));

            if (dot(normal, L) > 0) {
                float dist = length(lights[j].pos_dir.xyz - intersectionPoint);
                vec3 attCoef = lights[j].color.xyz / (lights[j].attenuation.x +
                                lights[j].attenuation.y * dist +
                                lights[j].attenuation.z * dist * dist * 0.01f);

                // Check if object has a material, otherwise use default values
                vec3 phong = materials[plane_material_index].diffuse.xyz * dot(normal, L) +
                                materials[plane_material_index].specularity.xyz * pow(max(dot(-normal,H), 0), materials[plane_material_index].shininess);
                color += vec4(attCoef * phong, 0.0f);
            }
        }
    }

    color += materials[plane_material_index].emission;

    return color;
}

// HitInfo intersectBoxes(Ray r) {
//     vec3    normal;
//     float   intersection_dist;
//     int     plane_index;
//     HitInfo h_info = {vec3(0.f), FAR_CLIP, numObj, 0};

//     for (int box_index = 0; box_index < numObj; box_index++) {
//         if ((plane_index = intersectBox(r, box_index, intersection_dist, normal)) != -1
//             && intersection_dist < h_info.intersection_dist) {
//             h_info.intersection_dist = intersection_dist;
//             h_info.box_index = box_index;
//             h_info.normal = normal;
//             h_info.plane_index = plane_index;
//         }
//     }
//     return h_info;
// }

bool isInContainingVoxel(Object obj, vec3 voxel_coor) {
    for (int voxel_index = 0; voxel_index < 8; voxel_index++) {
        if (obj.containing_voxels[voxel_index] == voxel_coor)
            return true;
    }
    return false;
}

HitInfo intersectBoxes(Ray r, vec3 voxel_coor, HitInfo h_info) {
    vec3    normal;
    float   intersection_dist;
    int     plane_index;

    return h_info;
    for (int box_index = 0; box_index < numObj; box_index++) {
        if (isInContainingVoxel(objects[box_index], voxel_coor) && (plane_index = intersectBox(r, box_index, intersection_dist, normal)) != -1 && intersection_dist < h_info.intersection_dist)
            h_info.intersection_dist = intersection_dist;
            h_info.box_index = box_index;
            h_info.normal = normal;
    }
    return h_info;
}

// From: https://medium.com/@calebleak/raymarching-voxel-rendering-58018201d9d6
HitInfo March(Ray r) {
    int level = 2;
    float t = 0;
    int voxel_size = 4;
    HitInfo h_info = {vec3(0.f), FAR_CLIP, numObj, 0};

    while (t <= FAR_CLIP) {
        ivec3 curr_point = ivec3(r.origin + r.dir * t);
        ivec3 texture_size = textureSize(shadowTexture, level);
        vec4 c = texelFetch(shadowTexture, curr_point, level);
        if (c.x > 0) {
            if (level == 0)
            {
                h_info.intersection_dist = 0;
                return (h_info);
                // return intersectBoxes(r, curr_point, h_info);
            }
            level--;
            voxel_size /= 2;
        }
        // Compute distance to the closest voxels in each axis
        vec3 closest_voxels = (step(0, abs(r.dir)) * sign(r.dir) * voxel_size - mod(curr_point, voxel_size));
        // Compute all ts by which to multiply ray to reach closest voxels
        vec3 deltas = closest_voxels / r.dir;
        // Choose lowest t
        t += max(min(min(deltas.x, deltas.y), deltas.z), EPSILON);
    }
    return h_info;
}

layout (local_size_x = 16, local_size_y = 8) in;
void main(void) {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }

    vec4    color = vec4(0.f);
    HitInfo h_info;
    vec2    pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
    Ray     r = initRay(pix.x, pix.y);

    // if (true) {
    //     int level = 2;
    //     // ivec3 curr_point = ivec3(r.origin + r.dir);
    //     ivec3 size = textureSize(shadowTexture, 2);
    //     float c = texelFetch(shadowTexture, curr_point, 2).x;
    //     if (size.x == 250)
    //         color = vec4(1.0, 0.0, c, 1.f);
    //     else
    //         color = vec4(1.f);
    //     imageStore(framebuffer, pix, color);
    //     return;
    // }
    for (uint n = 0; n < reflectionDepth + 1; ++n) {
        float t = FAR_CLIP;
        // Check if the ray hit a non-empty voxel.
        HitInfo h_info = March(r);
        color = vec4(1.f, 0.f, 0.f, 1.f);
        if (h_info.intersection_dist != FAR_CLIP)
            color.z = 1.f;
        imageStore(framebuffer, pix, color);
        return;
        if(h_info.intersection_dist < t && h_info.intersection_dist >= -EPSILON)
            t = h_info.intersection_dist;

        // If so compute Color at intersection otherwise exit early.
        if (h_info.box_index == numObj || t >= FAR_CLIP)
            break;

        uint plane_material_index = objects[h_info.box_index].material_index[h_info.plane_index];
        vec4 tempColor = calculateColor(r, t, h_info.box_index, h_info.normal, plane_material_index);
        vec4 spec = materials[plane_material_index].specularity;

        // Check if material specularity is defined (i.e. spec != vec4(0))
        // If so compute reflection ray and continue loop otherwise exit early.
        if (dot(spec, spec) > EPSILON){
            color += spec * tempColor;
            r = getReflectionRay(r, t, h_info.box_index, h_info.normal);
        } else {
            color += tempColor;
            break;
        }
    }
    
    imageStore(framebuffer, pix, color);
}