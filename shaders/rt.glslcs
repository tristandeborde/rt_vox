#version 460 core

layout(binding = 0, rgba32f) uniform image2D framebuffer;

struct Camera{
    vec3 pos;
    vec3 dir;
    vec3 yAxis;
    vec3 xAxis;
    float tanFovY;
    float tanFovX;
};

struct box {
    vec3 min;
    vec3 max;
    mat4 transMat;
};

const box boxes[] = {
    /* The ground */
    {vec3(-5.0, -0.1, -5.0), vec3(5.0, 0.0, 5.0), mat4(1.0)},
    /* box in the middle */
    {vec3(-0.5, 0.0, -0.5), vec3(0.5, 1.0, 0.5), mat4(1.0)}
};

struct hitinfo {
    float intersection_dist;
    int   bi;
};

struct planeinfo {
    float e;
    float f;
    float tMin;
    float tMax;
}

// The camera specification
uniform Camera camera;
uniform uint width;
uniform uint height;
uniform uint reflectionDepth;

#define MAX_SCENE_BOUNDS 100.0
#define NUM_BOXES 2

// Initialize the primary ray for pixel x, y
vec3 initRay(uint x, uint y)
{
    float halfWidth = float(width) / 2.0f;
    float halfHeight = float(height) / 2.0f;

    float a = camera.tanFovX * ((float(x) - halfWidth + 0.5f) / halfWidth);
    float b = camera.tanFovY * ((halfHeight - float(y) - 0.5f) / halfHeight);

    vec3 dir = normalize((a * camera.xAxis + b * camera.yAxis + camera.dir).xyz);

    return dir;
}

float fabs(float f) {
    return (f > 0 ? f : -f);
}

bool intersectPlanes(vec3 axis, int ax_index, out planeinfo p_info, out vec3 normal) {
	// Test intersection between ray and the 2 planes perpendicular to one OBB axis
    float swapped = 1.f;

    if ( fabs(f) > 0.001f ) {
        float t1 = (p_info.e + b.min[ax_index]])/p_info.f; // Intersection with "left" (for xaxis) plane
        float t2 = (p_info.e + b.max[ax_index]])/p_info.f; // Intersection with "right" (for xaxis) plane
        // We want t1 to be nearest intersection, so if it's not, invert t1 and t2
        if (t1>t2) {
            float tmp = t1;
            t1 = t2;
            t2 = w;
            swapped = -1.f; // Used to invert the normal (~ choose opposite cube face)
        }

        p_info.tMax = t2 < p_info.tMax ? t2 : p_info.tMax; // Tmax = nearest "far" intersection
        if (t1 > p_info.tMin) // Tmin = farthest "near" intersection
        {
            p_info.tMin = t1;
            normal = (swapped * xaxis);
        }

        // The trick : if "far" is closer than "near", then there is NO intersection.
        if (p_info.tMax < p_info.tMin)
            return false;
    }
    else if(-p_info.e + b.min[ax_index] > 0.0f || -p_info.e + b.max[ax_index] < 0.0f) {
        // Rare case : the ray is almost parallel to the planes, so they don't have any "intersection"
            return false;
    }
} 

bool intersectBox(vec3 ray_origin, vec3 ray_dir, const box b, inout float intersection_dist, inout vec3 normal) {
    // https://www.opengl-tutorial.org/miscellaneous/clicking-on-objects/picking-with-custom-ray-obb-function/

    // 4th vector in a transformation matrix is translation vector, here the center
    vec3 center = {b.transMat[3].x, b.transMat[3].y, b.transMat[3].z};
    vec3 delta = center - ray_origin;
    planeinfo p_info = {0.0f, 0.0f, 0.0f, 100000.0f};

    for (int ax_index = 0; ax_index < 3; ax_index++) {
        vec3 axis = {b.transMat[ax_index].x, b.transMat[ax_index].y, b.transMat[ax_index].z};
        float p_info.e = dot(xaxis, delta);   // Projection of (center - ray_orig) on axis
        float p_info.f = dot(xaxis, ray_dir); // Projection of ray on axis
        if (!intersectPlanes(axis, ax_index, p_info, normal))
            return false;
    }

	intersection_dist = p_info.tMin;
    return true;
}

int intersectBoxes(vec3 origin, vec3 dir, out hitinfo info, out vec3 normal) {
    int box_index;
    float smallest = MAX_SCENE_BOUNDS;

    for (box_index = 0; box_index < NUM_BOXES; box_index++) {
        float intersection_dist = 0.f;
        if (intersectBox(origin, dir, boxes[box_index], intersection_dist, normal)
            && intersection_dist < smallest) {
            info.intersection_dist = intersection_dist;
            info.bi = box_index;
            smallest = intersection_dist;
        }
    }
    return box_index;
}

/*
vec4 trace(vec3 origin, vec3 dir) {
    hitinfo i;
    if (intersectBoxes(origin, dir, i)) {
        vec4 gray = vec4(i.bi / 10.0 + 0.8);
        return vec4(gray.rgb, 1.0);
    }
    return vec4(0.0, 0.0, 0.0, 1.0);
}
*/

// Comment, delete useless bitss on spheres and directional lights
vec4 calculateColor(Ray r, float t, int box_index, vec3 normal)
{
    vec4 color = vec4(0);
    vec3 N, L, H;
    int matIdx = objects[objIdx].material_index;
    vec3 intersectionPoint = r.origin + t * r.dir;

    // CUSTOM: Get plane's normal
    box b = boxes[objIdx];
    N = normal;
    /* HORRIBLE MANUAL VERSION
    vec3 center = {b.transMat[3].x, b.transMat[3].y, b.transMat[3].z};
    vec3 normal = intersectionPoint - center;
    for (int i = 0; i < 3; i++)
        radius[i] = radius[i] > 0.5f ? 1 : 0;
    N = normalize(objects[objIdx].p.B.xyz);
    */

    // Mirror the normal if the camera's position is at the other side of the plane.
    // This avoids considering light sources behind the plane.
    if( dot(N, camera.pos.xyz - intersectionPoint) < 0){
        N = -1.f * N;
    }

    intersectionPoint += 0.01f * N;

    for (int j = 0; j < numLights; ++j) {
        int lightType = int(lights[j].attenuation.w);

        switch (lightType) {
            //Point light
            case 1:{
                L = normalize(lights[j].pos_dir.xyz - intersectionPoint);
            }break;

            //Directional light
            case 2:{
                L = normalize(lights[j].pos_dir.xyz);
            }break;
        }

        Ray shadowRay = Ray(intersectionPoint, L);
        bool inShadow = false;

        for (int i = 0; i < numObj; ++i) {
            float temp = hitPlane(shadowRay, objects[i].p);

            switch (lightType) {
                //Point light
                case 1:{
                    if (temp < FAR_CLIP &&
                        temp >= -0.001f &&
                        temp < length(intersectionPoint - lights[j].pos_dir.xyz))
                    {
                        inShadow = true;
                        i = int(numObj);
                    }
                } break;

                //Directional light
                case 2:{
                    if (temp < FAR_CLIP && temp >= -0.001f) {
                        inShadow = true;
                        i = int(numObj);
                    }
                } break;
            }

        }

        if (!inShadow) {
            H = normalize(L + normalize(camera.pos.xyz - intersectionPoint));

            if (dot(N, L) > 0) {
                float dist = length(lights[j].pos_dir.xyz - intersectionPoint);
                vec3 attCoef = lights[j].color.xyz / (lights[j].attenuation.x +
                                lights[j].attenuation.y * dist +
                                lights[j].attenuation.z * dist * dist * 0.01f);

                // Check if the object has a material.
                // If not use default values to compute color.
                if (matIdx != -1) {
                    vec3 phong = materials[matIdx].diffuse.xyz * dot(N, L) +
                                    materials[matIdx].specularity.xyz * pow(max(dot(-N,H), 0), materials[matIdx].shininess);
                    color += vec4(attCoef * phong, 0.0f);
                } else {
                    vec3 phong = vec3(0.5,0.5,0.5) * max(dot(N, L), 0) +
                                    vec3(0.5,0.5,0.5) * pow( max( dot(N,H), 0), 10);
                    color += vec4(attCoef * phong, 0.0f);
                }
            }
        }
    }

    if (matIdx != -1) {
        color += materials[matIdx].emission;
    }

    return color;
}

layout (local_size_x = 16, local_size_y = 8) in;
void main(void) {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }
    vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
    vec3 ray = initRay(pix.x, pix.y);
    hitinfo info;
    vec3 normal

    for (uint n = 0; n < reflectionDepth + 1; ++n) {
        // Check if the ray hit an object.
        int box_index = intersectBoxes(camera.pos, ray, normal, info);

        // If so compute Color at intersection otherwise exit early.
        if (box_index != NUM_BOXES) {
            vec4 tempColor = calculateColor(r, t, box_index, normal);
            vec4 spec = materials[objects[box_index].material_index].specularity;

            // Check if material specularity is defined (i.e. spec != vec4(0))
            // If so compute reflection ray and continue loop otherwise exit early.
            if (dot(spec, spec) > 0.001){
                color += spec * tempColor;
                r = getReflectionRay(r, t, box_index);
            } else {
                color += tempColor;
                break;
            }
        } else {
            break;
        }
    }
    
    imageStore(framebuffer, pix, color);
}