#version 460 core

layout(binding = 0, rgba32f) uniform image2D framebuffer;

struct Camera{
    vec3 pos;
    vec3 dir;
    vec3 yAxis;
    vec3 xAxis;
    float tanFovY;
    float tanFovX;
};

struct Cube {
    mat4 transMat;
    vec3 min;
    vec3 max;
};

struct Object{
    Cube c;
    int material_index;
};

//attenuation.w : 1 = Point light; 2 = Directional light
struct Light{
    vec4 pos_dir;
    vec4 color;
    vec4 attenuation;
};

struct Material{
    vec4 diffuse;
    vec4 specularity;
    vec4 emission;
    float shininess;
};

struct hitinfo {
    vec3    normal;
    float   intersection_dist;
    int     box_index;
};

struct planeinfo {
    int     ax_index;
    float   e;
    float   f;
    float   tMin;
    float   tMax;
};

struct Ray{
    vec3 origin;
    vec3 dir;
};

layout(std430) buffer PrimitiveBuffer{
    Object objects[];
};

layout(std430) buffer MaterialBuffer{
    Material materials[];
};

layout(std430) buffer LightBuffer{
    Light lights[];
};

// The camera specification
uniform Camera camera;
uniform uint width;
uniform uint height;
uniform uint reflectionDepth;

#define FAR_CLIP 100.0
#define NUM_BOXES 2
#define NUM_LIGHTS 1

// Initialize the primary ray for pixel x, y
Ray initRay(uint x, uint y)
{
    float halfWidth = float(width) / 2.0f;
    float halfHeight = float(height) / 2.0f;

    float a = camera.tanFovX * ((float(x) - halfWidth + 0.5f) / halfWidth);
    float b = camera.tanFovY * ((halfHeight - float(y) - 0.5f) / halfHeight);

    vec3 dir = normalize((a * camera.xAxis + b * camera.yAxis + camera.dir).xyz);

    return Ray(camera.pos.xyz, dir);
}

float fabs(float f) {
    return (f > 0 ? f : -f);
}

bool intersectPlanes(const vec3 axis, const Cube c, inout planeinfo p_info, out vec3 normal) {
	// Test intersection between ray and the 2 planes perpendicular to one OBB axis
    float swapped = 1.f;

    if (fabs(p_info.f) > 0.001f) {
        float t1 = (p_info.e + c.min[p_info.ax_index])/p_info.f; // Intersection with "left" (for xaxis) plane
        float t2 = (p_info.e + c.max[p_info.ax_index])/p_info.f; // Intersection with "right" (for xaxis) plane
        // We want t1 to be nearest intersection, so if it's not, invert t1 and t2
        if (t1 > t2) {
            float tmp = t1;
            t1 = t2;
            t2 = tmp;
            swapped = -1.f; // Used to invert the normal (~ choose opposite cube face)
        }

        p_info.tMax = t2 < p_info.tMax ? t2 : p_info.tMax; // Tmax = nearest "far" intersection
        if (t1 > p_info.tMin) { // Tmin = farthest "near" intersection
            p_info.tMin = t1;
            normal = (swapped * axis);
        }

        // The trick : if "far" is closer than "near", then there is NO intersection.
        if (p_info.tMax < p_info.tMin)
            return false;
    }
    else if(-p_info.e + c.min[p_info.ax_index] > 0.0f ||
                -p_info.e + c.max[p_info.ax_index] < 0.0f) {
        // Rare case : the ray is almost parallel to the planes, so they don't have any "intersection"
        return false;
    }
} 

bool intersectBox(Ray r, const Cube c, out float intersection_dist, out vec3 normal) {
    // https://www.opengl-tutorial.org/miscellaneous/clicking-on-objects/picking-with-custom-ray-obb-function/

    // 4th vector in a transformation matrix is translation vector, here the center
    vec3 center = {c.transMat[3].x, c.transMat[3].y, c.transMat[3].z};
    vec3 delta = center - r.origin;
    planeinfo p_info = {0, 0.0f, 0.0f, 0.0f, 100000.0f};

    for (int ax_index = 0; ax_index < 3; ax_index++) {
        vec3 axis = {c.transMat[ax_index].x, c.transMat[ax_index].y, c.transMat[ax_index].z};
        p_info.e = dot(axis, delta); // Projection of (center - ray_orig) on axis
        p_info.f = dot(axis, r.dir); // Projection of ray on axis
        p_info.ax_index = ax_index;
        if (!intersectPlanes(axis, c, p_info, normal))
            return false;
    }

	intersection_dist = p_info.tMin;
    return true;
}

hitinfo intersectBoxes(Ray r) {
    vec3    normal = {0.f, 0.f, 0.f};
    float   intersection_dist = 0.f;
    hitinfo h_info = {vec3(0.f), FAR_CLIP, 0};

    for (int box_index = 0; box_index < NUM_BOXES; box_index++) {
        if (intersectBox(r, objects[box_index].c, intersection_dist, normal)
            && intersection_dist < h_info.intersection_dist) {
            h_info.intersection_dist = intersection_dist;
            h_info.box_index = box_index; // TODO Remove cuz box_index already returned
            h_info.normal = normal;
        }
    }
    return h_info;
}

Ray getReflectionRay(Ray r, float t, int objIdx, vec3 normal)
{
    vec3 intersectionPoint = r.origin + r.dir * t;

    // Compute Normal at intersection point
    vec3 N = normalize(normal);

    // Compute reflected direction vector along the normal
    vec3 reflectedDir = normalize(r.dir - 2 * dot(r.dir, N) * N);

    return Ray(intersectionPoint + reflectedDir * 0.01f, reflectedDir);
}

// Comment, delete useless bits on spheres and directional lights
vec4 calculateColor(Ray r, float t, int box_index, vec3 normal)
{
    vec4 color = vec4(0);
    vec3 L, H;
    int matIdx = objects[box_index].material_index;
    Cube c = objects[box_index].c;

    vec3 intersectionPoint = r.origin + t * r.dir;
    intersectionPoint += 0.01f * normal; // TODO: Find why offset intersectionPoint along normal like this

    for (int j = 0; j < NUM_LIGHTS; ++j) {
        int lightType = int(lights[j].attenuation.w);

        switch (lightType) {
            //Point light
            case 1:{
                L = normalize(lights[j].pos_dir.xyz - intersectionPoint);
            }break;

            //Directional light
            case 2:{
                L = normalize(lights[j].pos_dir.xyz);
            }break;
        }

        Ray shadowRay = Ray(intersectionPoint, L);
        bool inShadow = false;

        for (int i = 0; i < NUM_BOXES; ++i) {
            float intersection_dist;
            vec3 normal;
            if (!intersectBox(shadowRay, objects[i].c, intersection_dist, normal))
                continue;

            switch (lightType) {
                //Point light
                case 1:{
                    if (intersection_dist < FAR_CLIP &&
                        intersection_dist >= -0.001f &&
                        intersection_dist < length(intersectionPoint - lights[j].pos_dir.xyz))
                    {
                        inShadow = true;
                        i = int(NUM_BOXES);
                    }
                } break;

                //Directional light
                case 2:{
                    if (intersection_dist < FAR_CLIP && intersection_dist >= -0.001f) {
                        inShadow = true;
                        i = int(NUM_BOXES);
                    }
                } break;
            }
        }

        if (!inShadow) {
            H = normalize(L + normalize(camera.pos.xyz - intersectionPoint));

            if (dot(normal, L) > 0) {
                float dist = length(lights[j].pos_dir.xyz - intersectionPoint);
                vec3 attCoef = lights[j].color.xyz / (lights[j].attenuation.x +
                                lights[j].attenuation.y * dist +
                                lights[j].attenuation.z * dist * dist * 0.01f);

                // Check if the object has a material.
                // If not use default values to compute color.
                if (matIdx != -1) {
                    vec3 phong = materials[matIdx].diffuse.xyz * dot(normal, L) +
                                    materials[matIdx].specularity.xyz * pow(max(dot(-normal,H), 0), materials[matIdx].shininess);
                    color += vec4(attCoef * phong, 0.0f);
                } else {
                    vec3 phong = vec3(0.5,0.5,0.5) * max(dot(normal, L), 0) +
                                    vec3(0.5,0.5,0.5) * pow( max( dot(normal,H), 0), 10);
                    color += vec4(attCoef * phong, 0.0f);
                }
            }
        }
    }

    if (matIdx != -1) {
        color += materials[matIdx].emission;
    }

    return color;
}

layout (local_size_x = 16, local_size_y = 8) in;
void main(void) {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }

    hitinfo h_info;
    vec4    color = vec4(0.f);
    vec2    pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
    Ray     r = initRay(pix.x, pix.y);

    for (uint n = 0; n < reflectionDepth + 1; ++n) {
        float t = FAR_CLIP;
        // Check if the ray hit an object.
        h_info = intersectBoxes(r);

        // If so compute Color at intersection otherwise exit early.
        if (h_info.box_index != NUM_BOXES) {
            vec4 tempColor = calculateColor(r, t, h_info.box_index, h_info.normal);
            vec4 spec = materials[objects[h_info.box_index].material_index].specularity;

            // Check if material specularity is defined (i.e. spec != vec4(0))
            // If so compute reflection ray and continue loop otherwise exit early.
            if (dot(spec, spec) > 0.001){
                color += spec * tempColor;
                r = getReflectionRay(r, t, h_info.box_index, h_info.normal);
            } else {
                color += tempColor;
                break;
            }
        } else {
            break;
        }
    }
    
    imageStore(framebuffer, pix, color);
}